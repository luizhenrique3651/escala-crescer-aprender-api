openapi: 3.0.4
info:
  title: Escala API - Crescer e aprender
  description: |-
    Escala API é uma API desenvolvida para facilitar o cadastro e o controle de escalas de voluntários do projeto social Crescer e Aprender. Esse projeto tem como missão oferecer aulas gratuitas de Informática, Matemática e Língua Portuguesa para crianças em situação de vulnerabilidade social.

    Links úteis:
    - [Repositório no GitHub](https://github.com/luizhenrique3651/escala-crescer-aprender-api)
    - [Instagram do projeto Crescer e Aprender](https://www.instagram.com/proj_crescereaprender/)
  termsOfService: https://swagger.io/terms/
  contact:
    email: uizhenrique@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.12

servers:
  - url: https://Escalastore3.swagger.io/api/v3
tags:
  - name: Escala
    description: Gerencie escalas das aulas
    externalDocs:
      description: Find out more
      url: https://swagger.io
  - name: Voluntario
    description: Gerencie os voluntarios e suas datas de disponibilidade para as escalas.
    externalDocs:
      description: Find out more about our store
      url: https://swagger.io
paths:
  /escala:
    post:
      tags:
        - Escala
      summary: Cadastra uma nova Escala no banco de dados.
      description: Criação e persistencia de uma nova Escala, fornecendo as datas das aulas,o mês e o ano delas, bem como os voluntários escalados para tais.
      operationId: addEscala
      requestBody:
        description: Cadastra uma nova Escala.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Escala'
          application/xml:
            schema:
              $ref: '#/components/schemas/Escala'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Escala'
        required: true
      responses:
        '200':
          description: Cadastro realizado com sucesso!
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Escala'
            application/xml:
              schema:
                $ref: '#/components/schemas/Escala'
        '400':
          description: Dados inválidos para requisição
        '422':
          description: Erro de validação.
        default:
          description: Erro inesperado.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Escalastore_auth:
            - write:Escalas
            - read:Escalas

    put:
      tags:
        - Escala
      summary: Atualiza uma Escala existente.
      description:  Atualiza uma Escala previamente cadastrada através do Id.
      operationId: updateEscala
      requestBody:
        description: Atualiza uma Escala existente no banco de dados.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Escala'
          application/xml:
            schema:
              $ref: '#/components/schemas/Escala'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Escala'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Escala'
            application/xml:
              schema:
                $ref: '#/components/schemas/Escala'
        '400':
          description: Invalid ID supplied
        '404':
          description: Escala not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Escalastore_auth:
            - write:Escalas
            - read:Escalas
  /Escala/findByStatus:
    get:
      tags:
        - Escala
      summary: Finds Escalas by status.
      description: Multiple status values can be provided with comma separated strings.
      operationId: findEscalasByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Escala'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Escala'
        '400':
          description: Invalid status value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Escalastore_auth:
            - write:Escalas
            - read:Escalas
  /Escala/findByTags:
    get:
      tags:
        - Escala
      summary: Finds Escalas by tags.
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findEscalasByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Escala'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Escala'
        '400':
          description: Invalid tag value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Escalastore_auth:
            - write:Escalas
            - read:Escalas
  /Escala/{EscalaId}:
    get:
      tags:
        - Escala
      summary: Find Escala by ID.
      description: Returns a single Escala.
      operationId: getEscalaById
      parameters:
        - name: EscalaId
          in: path
          description: ID of Escala to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Escala'
            application/xml:
              schema:
                $ref: '#/components/schemas/Escala'
        '400':
          description: Invalid ID supplied
        '404':
          description: Escala not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - api_key: []
        - Escalastore_auth:
            - write:Escalas
            - read:Escalas
    post:
      tags:
        - Escala
      summary: Updates a Escala in the store with form data.
      description: Updates a Escala resource based on the form data.
      operationId: updateEscalaWithForm
      parameters:
        - name: EscalaId
          in: path
          description: ID of Escala that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of Escala that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of Escala that needs to be updated
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Escala'
            application/xml:
              schema:
                $ref: '#/components/schemas/Escala'
        '400':
          description: Invalid input
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Escalastore_auth:
            - write:Escalas
            - read:Escalas
    delete:
      tags:
        - Escala
      summary: Deletes a Escala.
      description: Delete a Escala.
      operationId: deleteEscala
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: EscalaId
          in: path
          description: Escala id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Escala deleted
        '400':
          description: Invalid Escala value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Escalastore_auth:
            - write:Escalas
            - read:Escalas
  /Escala/{EscalaId}/uploadImage:
    post:
      tags:
        - Escala
      summary: Uploads an image.
      description: Upload image of the Escala.
      operationId: uploadFile
      parameters:
        - name: EscalaId
          in: path
          description: ID of Escala to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: No file uploaded
        '404':
          description: Escala not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - Escalastore_auth:
            - write:Escalas
            - read:Escalas
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns Escala inventories by status.
      description: Returns a map of status codes to quantities.
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a Escala.
      description: Place a new order in the store.
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID.
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - store
      summary: Delete purchase order by identifier.
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors.
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: order deleted
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user:
    post:
      tags:
        - user
      summary: Create user.
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array.
      description: Creates list of users with given input array.
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system.
      description: Log into the system.
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session.
      description: Log user out of the system.
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: successful operation
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name.
      description: Get user detail based on username.
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - user
      summary: Update user resource.
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
        '404':
          description: user not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - user
      summary: Delete user resource.
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        EscalaId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Escala:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: Escala status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Escala
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  requestBodies:
    Escala:
      description: Escala object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Escala'
        application/xml:
          schema:
            $ref: '#/components/schemas/Escala'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    Escalastore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://Escalastore3.swagger.io/oauth/authorize
          scopes:
            "write:Escalas": modify Escalas in your account
            "read:Escalas": read your Escalas
    api_key:
      type: apiKey
      name: api_key
      in: header